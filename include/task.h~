#ifndef _TASK_H
#define _TASK_H

#include <gdt.h>
#include <common.h>
#include <mm/paging.h>

typedef struct
{
	uint32_t eax, ebx, ecx, edx, esi, edi, esp, ebp, eip, eflags, cr3;
} Registers;

typedef struct kthread
{
	Registers regs;
	uint32_t virtual_addr;
	struct kthread *next;
} kthread_t;

static uint32_t flags, page_dir;

void init_tasking(void);
void kthread_create(kthread_t* task, void(*main)());
void kthread_join(kthread_t *thread);

void preempt(); // Switch task frontend

extern void switch_task(Registers *old, Registers *new); // The function which actually switches


typedef struct __attribute__((packed)) tss_entry_struct
{
	uint32_t prev_tss;   // The previous TSS - if we used hardware task switching this would form a linked list.
	uint32_t esp0;       // The stack pointer to load when we change to kernel mode.
	uint32_t ss0;        // The stack segment to load when we change to kernel mode.
	uint32_t esp1;       // everything below here is unusued now.. 
	uint32_t ss1;
	uint32_t esp2;
	uint32_t ss2;
	uint32_t cr3;
	uint32_t eip;
	uint32_t eflags;
	uint32_t eax;
	uint32_t ecx;
	uint32_t edx;
	uint32_t ebx;
	uint32_t esp;
	uint32_t ebp;
	uint32_t esi;
	uint32_t edi;
	uint32_t es;         
	uint32_t cs;        
	uint32_t ss;        
	uint32_t ds;        
	uint32_t fs;       
	uint32_t gs;         
	uint32_t ldt;      
	uint16_t trap;
	uint16_t iomap_base;
} tss_entry_t;

#endif
